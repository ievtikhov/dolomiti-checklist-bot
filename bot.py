from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –û–±—â–∏–π —Å–ø–∏—Å–æ–∫
default_checklist = [
    "–ü–∞—Å–ø–æ—Ä—Ç / ID", "–°—Ç—Ä–∞—Ö–æ–≤–∫–∞", "–¢—Ä–µ–∫–∏–Ω–≥–æ–≤—ã–µ –±–æ—Ç–∏–Ω–∫–∏", "–¢–µ—Ä–º–æ–±–µ–ª—å—ë", "–§–ª–∏—Å–∫–∞",
    "–í–µ—Ç—Ä–æ–≤–∫–∞", "–û—á–∫–∏ / –∫–µ–ø–∫–∞ / —à–∞–ø–∫–∞", "–ë—É—Ç—ã–ª–∫–∞ –≤–æ–¥—ã", "–ü–µ—Ä–µ–∫—É—Å",
    "–¢—Ä–µ–∫–∏–Ω–≥–æ–≤—ã–µ –ø–∞–ª–∫–∏", "–î—Ä–æ–Ω", "–ë–∏–Ω–æ–∫–ª—å", "–ó–∞—Ä—è–¥–∫–∞ / –ø–∞—É—ç—Ä–±–∞–Ω–∫",
    "–ê–ø—Ç–µ—á–∫–∞", "–°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–µ–º", "–û—Ñ—Ñ–ª–∞–π–Ω-–∫–∞—Ä—Ç—ã"
]

# –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

def get_user_data(user_id):
    if user_id not in user_data:
        user_data[user_id] = {
            "marked": set(),
            "custom": []
        }
    return user_data[user_id]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—á–µ–∫–ª–∏—Å—Ç –¥–ª—è –î–æ–ª–æ–º–∏—Ç–æ–≤ üèîÔ∏è\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/checklist ‚Äî –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫\n"
        "/mylist ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫\n"
        "/mark [–Ω–æ–º–µ—Ä] ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –ø—É–Ω–∫—Ç\n"
        "/unmark [–Ω–æ–º–µ—Ä] ‚Äî —Å–Ω—è—Ç—å –æ—Ç–º–µ—Ç–∫—É\n"
        "/add [—Ç–µ–∫—Å—Ç] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –≤–µ—â—å\n"
        "/remove [–Ω–æ–º–µ—Ä] ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –≤–µ—â—å\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫"
    )

async def checklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "üìã –û–±—â–∏–π —á–µ–∫-–ª–∏—Å—Ç:\n\n"
    for i, item in enumerate(default_checklist, start=1):
        msg += f"{i}. {item}\n"
    await update.message.reply_text(msg)

async def mylist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    data = get_user_data(uid)
    full_list = default_checklist + data["custom"]

    msg = "üß≥ –¢–≤–æ–π —á–µ–∫-–ª–∏—Å—Ç:\n\n"
    if not full_list:
        msg += "‚Äî –ø–æ–∫–∞ –ø—É—Å—Ç–æ"
    else:
        for i, item in enumerate(full_list, start=1):
            mark = "‚úÖ" if i in data["marked"] else "üî≤"
            msg += f"{mark} {i}. {item}\n"
    await update.message.reply_text(msg)

async def mark(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    data = get_user_data(uid)
    full_list = default_checklist + data["custom"]
    try:
        num = int(context.args[0])
        if 1 <= num <= len(full_list):
            data["marked"].add(num)
            await update.message.reply_text(f"‚úÖ –û—Ç–º–µ—Ç–∏–ª: {full_list[num-1]}")
        else:
            await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    except:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /mark [–Ω–æ–º–µ—Ä]")

async def unmark(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    data = get_user_data(uid)
    try:
        num = int(context.args[0])
        data["marked"].discard(num)
        await update.message.reply_text("‚ùé –°–Ω—è–ª –æ—Ç–º–µ—Ç–∫—É.")
    except:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /unmark [–Ω–æ–º–µ—Ä]")

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    data = get_user_data(uid)
    text = ' '.join(context.args)
    if text:
        data["custom"].append(text)
        await update.message.reply_text(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫: {text}")
    else:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /add [—Ç–µ–∫—Å—Ç]")

async def remove(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    data = get_user_data(uid)
    try:
        num = int(context.args[0])
        index = num - len(default_checklist) - 1
        if 0 <= index < len(data["custom"]):
            removed = data["custom"].pop(index)
            data["marked"].discard(num)
            await update.message.reply_text(f"‚ûñ –£–¥–∞–ª–µ–Ω–æ: {removed}")
        else:
            await update.message.reply_text("‚ùó –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –ø—É–Ω–∫—Ç—ã.")
    except:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /remove [–Ω–æ–º–µ—Ä]")

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    user_data[uid] = {"marked": set(), "custom": []}
    await update.message.reply_text("üîÅ –¢–≤–æ–π —Å–ø–∏—Å–æ–∫ —Å–±—Ä–æ—à–µ–Ω.")

# üîë –ó–ê–ú–ï–ù–ò –¢–û–ö–ï–ù –ù–ò–ñ–ï –ù–ê –¢–û–¢, –ß–¢–û –î–ê–õ BotFather
app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("checklist", checklist))
app.add_handler(CommandHandler("mylist", mylist))
app.add_handler(CommandHandler("mark", mark))
app.add_handler(CommandHandler("unmark", unmark))
app.add_handler(CommandHandler("add", add))
app.add_handler(CommandHandler("remove", remove))
app.add_handler(CommandHandler("reset", reset))

app.run_polling()
