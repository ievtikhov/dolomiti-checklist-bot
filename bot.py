import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes
)
from keep_alive import keep_alive

keep_alive()

BOT_TOKEN = os.getenv("BOT_TOKEN")

# –û–±—â–∏–π —á–µ–∫-–ª–∏—Å—Ç
default_checklist = [
    "–ü–∞—Å–ø–æ—Ä—Ç / ID", "–°—Ç—Ä–∞—Ö–æ–≤–∫–∞", "–¢—Ä–µ–∫–∏–Ω–≥–æ–≤—ã–µ –±–æ—Ç–∏–Ω–∫–∏", "–¢–µ—Ä–º–æ–±–µ–ª—å—ë", "–§–ª–∏—Å–∫–∞",
    "–í–µ—Ç—Ä–æ–≤–∫–∞", "–û—á–∫–∏ / –∫–µ–ø–∫–∞ / —à–∞–ø–∫–∞", "–ë—É—Ç—ã–ª–∫–∞ –≤–æ–¥—ã", "–ü–µ—Ä–µ–∫—É—Å",
    "–¢—Ä–µ–∫–∏–Ω–≥–æ–≤—ã–µ –ø–∞–ª–∫–∏", "–î—Ä–æ–Ω", "–ë–∏–Ω–æ–∫–ª—å", "–ó–∞—Ä—è–¥–∫–∞ / –ø–∞—É—ç—Ä–±–∞–Ω–∫",
    "–ê–ø—Ç–µ—á–∫–∞", "–°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–µ–º", "–û—Ñ—Ñ–ª–∞–π–Ω-–∫–∞—Ä—Ç—ã"
]

# –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
user_data = {}

def get_user_data(user_id):
    if user_id not in user_data:
        user_data[user_id] = {
            "marked": set()
        }
    return user_data[user_id]

def generate_checklist_markup(user_id):
    data = get_user_data(user_id)
    buttons = []

    for i, item in enumerate(default_checklist, start=1):
        checked = "‚úÖ" if i in data["marked"] else "üî≤"
        buttons.append([
            InlineKeyboardButton(f"{checked} {item}", callback_data=str(i))
        ])

    return InlineKeyboardMarkup(buttons)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—á–µ–∫–ª–∏—Å—Ç –¥–ª—è –î–æ–ª–æ–º–∏—Ç–æ–≤ üèîÔ∏è\n\n"
        "–ù–∞–∂–º–∏ /menu —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫."
    )

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    markup = generate_checklist_markup(uid)
    await update.message.reply_text("üß≥ –¢–≤–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç:", reply_markup=markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    uid = query.from_user.id
    data = get_user_data(uid)
    item_num = int(query.data)

    if item_num in data["marked"]:
        data["marked"].remove(item_num)
    else:
        data["marked"].add(item_num)

    new_markup = generate_checklist_markup(uid)
    await query.edit_message_reply_markup(reply_markup=new_markup)

app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("menu", menu))
app.add_handler(CallbackQueryHandler(button_handler))

app.run_polling()
